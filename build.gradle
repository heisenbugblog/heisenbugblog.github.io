buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jbake:jbake-core:2.4.0"
    classpath "org.freemarker:freemarker:2.3.20"
    classpath "org.pegdown:pegdown:1.4.2"
    classpath "org.asciidoctor:asciidoctorj:1.5.2"
    classpath "org.eclipse.jgit:org.eclipse.jgit:4.1+"
  }
}

import org.eclipse.jgit.api.Git
import org.eclipse.jgit.api.Status
import org.eclipse.jgit.api.errors.GitAPIException
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.storage.file.FileRepositoryBuilder
import org.eclipse.jgit.submodule.SubmoduleWalk
class Publish extends DefaultTask {
  @TaskAction
  void doAction() {
    Repository blogRepository = null
    Repository publishRepository = null
    Git git = null

    try {
      blogRepository = new FileRepositoryBuilder().setMustExist(true).setGitDir(project.file(".git")).build()

      git = new Git(blogRepository)
      Status status = git.status().call()
      if (!status.isClean()) {
        throw new Exception("Uncommited changes, please commit them.")
      }
      git.close()

      publishRepository = SubmoduleWalk.getSubmoduleRepository(blogRepository, "output")
      git = new Git(publishRepository)
      git.add().addFilepattern(".").call()
      git.commit().setMessage("Publishing changes up to commit '${blogRepository.getRef("dev").objectId.name}'.").call()
      git.push().call()
    } finally {
      blogRepository?.close()
      publishRepository?.close()
      git?.close()
    }
  }
}

import org.jbake.app.*
model {
  tasks {
    create("bake") {
      doLast {
        try {
          File source = projectDir
          File destination = file("output")
          Oven oven = new Oven(source, destination, true)
          oven.setupPaths()
          oven.bake()
        } catch (JBakeException e) {
          println e
        }
      }
    }
    create("publish", Publish) {
      dependsOn "bake"
    }
  }
}

